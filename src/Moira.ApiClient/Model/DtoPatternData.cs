// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoPatternData
    /// </summary>
    public partial class DtoPatternData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoPatternData" /> class.
        /// </summary>
        /// <param name="metrics">metrics</param>
        /// <param name="pattern">pattern</param>
        /// <param name="triggers">triggers</param>
        [JsonConstructor]
        public DtoPatternData(List<string> metrics, string pattern, List<DtoTriggerModel> triggers)
        {
            Metrics = metrics;
            Pattern = pattern;
            Triggers = triggers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        /* <example>[DevOps.my_server.hdd.freespace_mbytes,  DevOps.my_server.hdd.freespace_mbytes,  DevOps.my_server.db.*]</example> */
        [JsonPropertyName("metrics")]
        public List<string> Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        /* <example>Devops.my_server.*</example> */
        [JsonPropertyName("pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        [JsonPropertyName("triggers")]
        public List<DtoTriggerModel> Triggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoPatternData {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoPatternData" />
    /// </summary>
    public class DtoPatternDataJsonConverter : JsonConverter<DtoPatternData>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoPatternData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoPatternData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> metrics = default;
            Option<string> pattern = default;
            Option<List<DtoTriggerModel>> triggers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metrics":
                            metrics = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pattern":
                            pattern = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "triggers":
                            triggers = new Option<List<DtoTriggerModel>>(JsonSerializer.Deserialize<List<DtoTriggerModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!metrics.IsSet)
                throw new ArgumentException("Property is required for class DtoPatternData.", nameof(metrics));

            if (!pattern.IsSet)
                throw new ArgumentException("Property is required for class DtoPatternData.", nameof(pattern));

            if (!triggers.IsSet)
                throw new ArgumentException("Property is required for class DtoPatternData.", nameof(triggers));

            if (metrics.IsSet && metrics.Value == null)
                throw new ArgumentNullException(nameof(metrics), "Property is not nullable for class DtoPatternData.");

            if (pattern.IsSet && pattern.Value == null)
                throw new ArgumentNullException(nameof(pattern), "Property is not nullable for class DtoPatternData.");

            if (triggers.IsSet && triggers.Value == null)
                throw new ArgumentNullException(nameof(triggers), "Property is not nullable for class DtoPatternData.");

            return new DtoPatternData(metrics.Value, pattern.Value, triggers.Value);
        }

        /// <summary>
        /// Serializes a <see cref="DtoPatternData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPatternData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoPatternData dtoPatternData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoPatternData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoPatternData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoPatternData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoPatternData dtoPatternData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoPatternData.Metrics == null)
                throw new ArgumentNullException(nameof(dtoPatternData.Metrics), "Property is required for class DtoPatternData.");

            if (dtoPatternData.Pattern == null)
                throw new ArgumentNullException(nameof(dtoPatternData.Pattern), "Property is required for class DtoPatternData.");

            if (dtoPatternData.Triggers == null)
                throw new ArgumentNullException(nameof(dtoPatternData.Triggers), "Property is required for class DtoPatternData.");

            writer.WritePropertyName("metrics");
            JsonSerializer.Serialize(writer, dtoPatternData.Metrics, jsonSerializerOptions);
            writer.WriteString("pattern", dtoPatternData.Pattern);

            writer.WritePropertyName("triggers");
            JsonSerializer.Serialize(writer, dtoPatternData.Triggers, jsonSerializerOptions);
        }
    }
}
