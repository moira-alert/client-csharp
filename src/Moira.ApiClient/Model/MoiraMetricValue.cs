// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraMetricValue
    /// </summary>
    public partial class MoiraMetricValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraMetricValue" /> class.
        /// </summary>
        /// <param name="ts">ts</param>
        /// <param name="value">value</param>
        /// <param name="step">step</param>
        [JsonConstructor]
        public MoiraMetricValue(long ts, decimal value, Option<long?> step = default)
        {
            Ts = ts;
            Value = value;
            StepOption = step;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Ts
        /// </summary>
        [JsonPropertyName("ts")]
        public long Ts { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public decimal Value { get; set; }

        /// <summary>
        /// Used to track the state of Step
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StepOption { get; private set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [JsonPropertyName("step")]
        public long? Step { get { return this.StepOption; } set { this.StepOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraMetricValue {\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraMetricValue" />
    /// </summary>
    public class MoiraMetricValueJsonConverter : JsonConverter<MoiraMetricValue>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraMetricValue" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraMetricValue Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> ts = default;
            Option<decimal?> value = default;
            Option<long?> step = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ts":
                            ts = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "value":
                            value = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "step":
                            step = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ts.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricValue.", nameof(ts));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricValue.", nameof(value));

            if (ts.IsSet && ts.Value == null)
                throw new ArgumentNullException(nameof(ts), "Property is not nullable for class MoiraMetricValue.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class MoiraMetricValue.");

            if (step.IsSet && step.Value == null)
                throw new ArgumentNullException(nameof(step), "Property is not nullable for class MoiraMetricValue.");

            return new MoiraMetricValue(ts.Value.Value, value.Value.Value, step);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraMetricValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMetricValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraMetricValue moiraMetricValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraMetricValue, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraMetricValue" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMetricValue"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraMetricValue moiraMetricValue, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("ts", moiraMetricValue.Ts);

            writer.WriteNumber("value", moiraMetricValue.Value);

            if (moiraMetricValue.StepOption.IsSet)
                writer.WriteNumber("step", moiraMetricValue.StepOption.Value.Value);
        }
    }
}
