// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraMaintenanceInfo
    /// </summary>
    public partial class MoiraMaintenanceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraMaintenanceInfo" /> class.
        /// </summary>
        /// <param name="removeTime">removeTime</param>
        /// <param name="removeUser">removeUser</param>
        /// <param name="setupTime">setupTime</param>
        /// <param name="setupUser">setupUser</param>
        [JsonConstructor]
        public MoiraMaintenanceInfo(long? removeTime = default, string removeUser = default, long? setupTime = default, string setupUser = default)
        {
            RemoveTime = removeTime;
            RemoveUser = removeUser;
            SetupTime = setupTime;
            SetupUser = setupUser;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RemoveTime
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("remove_time")]
        public long? RemoveTime { get; set; }

        /// <summary>
        /// Gets or Sets RemoveUser
        /// </summary>
        [JsonPropertyName("remove_user")]
        public string RemoveUser { get; set; }

        /// <summary>
        /// Gets or Sets SetupTime
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("setup_time")]
        public long? SetupTime { get; set; }

        /// <summary>
        /// Gets or Sets SetupUser
        /// </summary>
        [JsonPropertyName("setup_user")]
        public string SetupUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraMaintenanceInfo {\n");
            sb.Append("  RemoveTime: ").Append(RemoveTime).Append("\n");
            sb.Append("  RemoveUser: ").Append(RemoveUser).Append("\n");
            sb.Append("  SetupTime: ").Append(SetupTime).Append("\n");
            sb.Append("  SetupUser: ").Append(SetupUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraMaintenanceInfo" />
    /// </summary>
    public class MoiraMaintenanceInfoJsonConverter : JsonConverter<MoiraMaintenanceInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraMaintenanceInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraMaintenanceInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> removeTime = default;
            Option<string> removeUser = default;
            Option<long?> setupTime = default;
            Option<string> setupUser = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "remove_time":
                            removeTime = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "remove_user":
                            removeUser = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "setup_time":
                            setupTime = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "setup_user":
                            setupUser = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!removeTime.IsSet)
                throw new ArgumentException("Property is required for class MoiraMaintenanceInfo.", nameof(removeTime));

            if (!removeUser.IsSet)
                throw new ArgumentException("Property is required for class MoiraMaintenanceInfo.", nameof(removeUser));

            if (!setupTime.IsSet)
                throw new ArgumentException("Property is required for class MoiraMaintenanceInfo.", nameof(setupTime));

            if (!setupUser.IsSet)
                throw new ArgumentException("Property is required for class MoiraMaintenanceInfo.", nameof(setupUser));

            return new MoiraMaintenanceInfo(removeTime.Value, removeUser.Value, setupTime.Value, setupUser.Value);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraMaintenanceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMaintenanceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraMaintenanceInfo moiraMaintenanceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraMaintenanceInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraMaintenanceInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMaintenanceInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraMaintenanceInfo moiraMaintenanceInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraMaintenanceInfo.RemoveTime != null)
                writer.WriteNumber("remove_time", moiraMaintenanceInfo.RemoveTime.Value);
            else
                writer.WriteNull("remove_time");

            if (moiraMaintenanceInfo.RemoveUser != null)
                writer.WriteString("remove_user", moiraMaintenanceInfo.RemoveUser);
            else
                writer.WriteNull("remove_user");

            if (moiraMaintenanceInfo.SetupTime != null)
                writer.WriteNumber("setup_time", moiraMaintenanceInfo.SetupTime.Value);
            else
                writer.WriteNull("setup_time");

            if (moiraMaintenanceInfo.SetupUser != null)
                writer.WriteString("setup_user", moiraMaintenanceInfo.SetupUser);
            else
                writer.WriteNull("setup_user");
        }
    }
}
