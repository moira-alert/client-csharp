// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraMetricState
    /// </summary>
    public partial class MoiraMetricState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraMetricState" /> class.
        /// </summary>
        /// <param name="eventTimestamp">eventTimestamp</param>
        /// <param name="state">state</param>
        /// <param name="suppressed">suppressed</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="deletedButKept">DeletedButKept controls whether the metric is shown to the user if the trigger has ttlState &#x3D; Del and the metric is in Maintenance. The metric remains in the database</param>
        /// <param name="maintenance">maintenance</param>
        /// <param name="maintenanceInfo">maintenanceInfo</param>
        /// <param name="suppressedState">suppressedState</param>
        /// <param name="value">value</param>
        /// <param name="values">values</param>
        [JsonConstructor]
        public MoiraMetricState(long eventTimestamp, string state, bool suppressed, long timestamp, Option<bool?> deletedButKept = default, Option<long?> maintenance = default, MoiraMaintenanceInfo maintenanceInfo = default, Option<string> suppressedState = default, Option<decimal?> value = default, Option<Dictionary<string, decimal>> values = default)
        {
            EventTimestamp = eventTimestamp;
            State = state;
            Suppressed = suppressed;
            Timestamp = timestamp;
            DeletedButKeptOption = deletedButKept;
            MaintenanceOption = maintenance;
            MaintenanceInfo = maintenanceInfo;
            SuppressedStateOption = suppressedState;
            ValueOption = value;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EventTimestamp
        /// </summary>
        /* <example>1590741878</example> */
        [JsonPropertyName("event_timestamp")]
        public long EventTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /* <example>OK</example> */
        [JsonPropertyName("state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Suppressed
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("suppressed")]
        public bool Suppressed { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /* <example>1590741878</example> */
        [JsonPropertyName("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>
        /// Used to track the state of DeletedButKept
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeletedButKeptOption { get; private set; }

        /// <summary>
        /// DeletedButKept controls whether the metric is shown to the user if the trigger has ttlState &#x3D; Del and the metric is in Maintenance. The metric remains in the database
        /// </summary>
        /// <value>DeletedButKept controls whether the metric is shown to the user if the trigger has ttlState &#x3D; Del and the metric is in Maintenance. The metric remains in the database</value>
        /* <example>false</example> */
        [JsonPropertyName("deleted_but_kept")]
        public bool? DeletedButKept { get { return this.DeletedButKeptOption; } set { this.DeletedButKeptOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Maintenance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaintenanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("maintenance")]
        public long? Maintenance { get { return this.MaintenanceOption; } set { this.MaintenanceOption = new Option<long?>(value); } }

        /// <summary>
        /// Gets or Sets MaintenanceInfo
        /// </summary>
        [JsonPropertyName("maintenance_info")]
        public MoiraMaintenanceInfo MaintenanceInfo { get; set; }

        /// <summary>
        /// Used to track the state of SuppressedState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SuppressedStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuppressedState
        /// </summary>
        [JsonPropertyName("suppressed_state")]
        public string SuppressedState { get { return this.SuppressedStateOption; } set { this.SuppressedStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /* <example>70</example> */
        [JsonPropertyName("value")]
        public decimal? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, decimal>> ValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [JsonPropertyName("values")]
        public Dictionary<string, decimal> Values { get { return this.ValuesOption; } set { this.ValuesOption = new Option<Dictionary<string, decimal>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraMetricState {\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  DeletedButKept: ").Append(DeletedButKept).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  MaintenanceInfo: ").Append(MaintenanceInfo).Append("\n");
            sb.Append("  SuppressedState: ").Append(SuppressedState).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraMetricState" />
    /// </summary>
    public class MoiraMetricStateJsonConverter : JsonConverter<MoiraMetricState>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraMetricState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraMetricState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> eventTimestamp = default;
            Option<string> state = default;
            Option<bool?> suppressed = default;
            Option<long?> timestamp = default;
            Option<bool?> deletedButKept = default;
            Option<long?> maintenance = default;
            Option<MoiraMaintenanceInfo> maintenanceInfo = default;
            Option<string> suppressedState = default;
            Option<decimal?> value = default;
            Option<Dictionary<string, decimal>> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_timestamp":
                            eventTimestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "suppressed":
                            suppressed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "timestamp":
                            timestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "deleted_but_kept":
                            deletedButKept = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "maintenance":
                            maintenance = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maintenance_info":
                            maintenanceInfo = new Option<MoiraMaintenanceInfo>(JsonSerializer.Deserialize<MoiraMaintenanceInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "suppressed_state":
                            suppressedState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "values":
                            values = new Option<Dictionary<string, decimal>>(JsonSerializer.Deserialize<Dictionary<string, decimal>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!eventTimestamp.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricState.", nameof(eventTimestamp));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricState.", nameof(state));

            if (!suppressed.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricState.", nameof(suppressed));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricState.", nameof(timestamp));

            if (!maintenanceInfo.IsSet)
                throw new ArgumentException("Property is required for class MoiraMetricState.", nameof(maintenanceInfo));

            if (eventTimestamp.IsSet && eventTimestamp.Value == null)
                throw new ArgumentNullException(nameof(eventTimestamp), "Property is not nullable for class MoiraMetricState.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class MoiraMetricState.");

            if (suppressed.IsSet && suppressed.Value == null)
                throw new ArgumentNullException(nameof(suppressed), "Property is not nullable for class MoiraMetricState.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class MoiraMetricState.");

            if (deletedButKept.IsSet && deletedButKept.Value == null)
                throw new ArgumentNullException(nameof(deletedButKept), "Property is not nullable for class MoiraMetricState.");

            if (maintenance.IsSet && maintenance.Value == null)
                throw new ArgumentNullException(nameof(maintenance), "Property is not nullable for class MoiraMetricState.");

            if (suppressedState.IsSet && suppressedState.Value == null)
                throw new ArgumentNullException(nameof(suppressedState), "Property is not nullable for class MoiraMetricState.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class MoiraMetricState.");

            return new MoiraMetricState(eventTimestamp.Value.Value, state.Value, suppressed.Value.Value, timestamp.Value.Value, deletedButKept, maintenance, maintenanceInfo.Value, suppressedState, value, values);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraMetricState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMetricState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraMetricState moiraMetricState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraMetricState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraMetricState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraMetricState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraMetricState moiraMetricState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraMetricState.State == null)
                throw new ArgumentNullException(nameof(moiraMetricState.State), "Property is required for class MoiraMetricState.");

            if (moiraMetricState.SuppressedStateOption.IsSet && moiraMetricState.SuppressedState == null)
                throw new ArgumentNullException(nameof(moiraMetricState.SuppressedState), "Property is required for class MoiraMetricState.");

            if (moiraMetricState.ValuesOption.IsSet && moiraMetricState.Values == null)
                throw new ArgumentNullException(nameof(moiraMetricState.Values), "Property is required for class MoiraMetricState.");

            writer.WriteNumber("event_timestamp", moiraMetricState.EventTimestamp);

            writer.WriteString("state", moiraMetricState.State);

            writer.WriteBoolean("suppressed", moiraMetricState.Suppressed);

            writer.WriteNumber("timestamp", moiraMetricState.Timestamp);

            if (moiraMetricState.DeletedButKeptOption.IsSet)
                writer.WriteBoolean("deleted_but_kept", moiraMetricState.DeletedButKeptOption.Value.Value);

            if (moiraMetricState.MaintenanceOption.IsSet)
                writer.WriteNumber("maintenance", moiraMetricState.MaintenanceOption.Value.Value);

            if (moiraMetricState.MaintenanceInfo != null)
            {
                writer.WritePropertyName("maintenance_info");
                JsonSerializer.Serialize(writer, moiraMetricState.MaintenanceInfo, jsonSerializerOptions);
            }
            else
                writer.WriteNull("maintenance_info");
            if (moiraMetricState.SuppressedStateOption.IsSet)
                writer.WriteString("suppressed_state", moiraMetricState.SuppressedState);

            if (moiraMetricState.ValueOption.IsSet)
                if (moiraMetricState.ValueOption.Value != null)
                    writer.WriteNumber("value", moiraMetricState.ValueOption.Value.Value);
                else
                    writer.WriteNull("value");

            if (moiraMetricState.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, moiraMetricState.Values, jsonSerializerOptions);
            }
        }
    }
}
