// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraTriggerCheck
    /// </summary>
    public partial class MoiraTriggerCheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraTriggerCheck" /> class.
        /// </summary>
        /// <param name="aloneMetrics">aloneMetrics</param>
        /// <param name="createdBy">createdBy</param>
        /// <param name="highlights">highlights</param>
        /// <param name="id">id</param>
        /// <param name="lastCheck">lastCheck</param>
        /// <param name="muteNewMetrics">muteNewMetrics</param>
        /// <param name="name">name</param>
        /// <param name="patterns">patterns</param>
        /// <param name="tags">tags</param>
        /// <param name="targets">targets</param>
        /// <param name="throttling">throttling</param>
        /// <param name="triggerType">triggerType</param>
        /// <param name="updatedBy">updatedBy</param>
        /// <param name="clusterId">clusterId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="desc">desc</param>
        /// <param name="errorValue">errorValue</param>
        /// <param name="expression">expression</param>
        /// <param name="pythonExpression">pythonExpression</param>
        /// <param name="sched">sched</param>
        /// <param name="triggerSource">triggerSource</param>
        /// <param name="ttl">ttl</param>
        /// <param name="ttlState">ttlState</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="warnValue">warnValue</param>
        [JsonConstructor]
        public MoiraTriggerCheck(Dictionary<string, bool> aloneMetrics, string createdBy, Dictionary<string, string> highlights, string id, MoiraCheckData lastCheck, bool muteNewMetrics, string name, List<string> patterns, List<string> tags, List<string> targets, long throttling, string triggerType, string updatedBy, Option<string> clusterId = default, long? createdAt = default, Option<string> desc = default, decimal? errorValue = default, Option<string> expression = default, Option<string> pythonExpression = default, Option<MoiraScheduleData> sched = default, Option<string> triggerSource = default, Option<long?> ttl = default, Option<string> ttlState = default, long? updatedAt = default, decimal? warnValue = default)
        {
            AloneMetrics = aloneMetrics;
            CreatedBy = createdBy;
            Highlights = highlights;
            Id = id;
            LastCheck = lastCheck;
            MuteNewMetrics = muteNewMetrics;
            Name = name;
            Patterns = patterns;
            Tags = tags;
            Targets = targets;
            Throttling = throttling;
            TriggerType = triggerType;
            UpdatedBy = updatedBy;
            ClusterIdOption = clusterId;
            CreatedAt = createdAt;
            DescOption = desc;
            ErrorValue = errorValue;
            ExpressionOption = expression;
            PythonExpressionOption = pythonExpression;
            SchedOption = sched;
            TriggerSourceOption = triggerSource;
            TtlOption = ttl;
            TtlStateOption = ttlState;
            UpdatedAt = updatedAt;
            WarnValue = warnValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AloneMetrics
        /// </summary>
        /* <example>{t1&#x3D;true}</example> */
        [JsonPropertyName("alone_metrics")]
        public Dictionary<string, bool> AloneMetrics { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [JsonPropertyName("created_by")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Highlights
        /// </summary>
        [JsonPropertyName("highlights")]
        public Dictionary<string, string> Highlights { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>292516ed-4924-4154-a62c-ebe312431fce</example> */
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastCheck
        /// </summary>
        [JsonPropertyName("last_check")]
        public MoiraCheckData LastCheck { get; set; }

        /// <summary>
        /// Gets or Sets MuteNewMetrics
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("mute_new_metrics")]
        public bool MuteNewMetrics { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Not enough disk space left</example> */
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Patterns
        /// </summary>
        /* <example>[]</example> */
        [JsonPropertyName("patterns")]
        public List<string> Patterns { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        /* <example>[server, disk]</example> */
        [JsonPropertyName("tags")]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        /* <example>[devOps.my_server.hdd.freespace_mbytes]</example> */
        [JsonPropertyName("targets")]
        public List<string> Targets { get; set; }

        /// <summary>
        /// Gets or Sets Throttling
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("throttling")]
        public long Throttling { get; set; }

        /// <summary>
        /// Gets or Sets TriggerType
        /// </summary>
        /* <example>rising</example> */
        [JsonPropertyName("trigger_type")]
        public string TriggerType { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [JsonPropertyName("updated_by")]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// Used to track the state of ClusterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClusterIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        /* <example>default</example> */
        [JsonPropertyName("cluster_id")]
        public string ClusterId { get { return this.ClusterIdOption; } set { this.ClusterIdOption = new Option<string>(value); } }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public long? CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Desc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescOption { get; private set; }

        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        /* <example>check the size of /var/log</example> */
        [JsonPropertyName("desc")]
        public string Desc { get { return this.DescOption; } set { this.DescOption = new Option<string>(value); } }

        /// <summary>
        /// Gets or Sets ErrorValue
        /// </summary>
        /* <example>1000</example> */
        [JsonPropertyName("error_value")]
        public decimal? ErrorValue { get; set; }

        /// <summary>
        /// Used to track the state of Expression
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExpressionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [JsonPropertyName("expression")]
        public string Expression { get { return this.ExpressionOption; } set { this.ExpressionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of PythonExpression
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PythonExpressionOption { get; private set; }

        /// <summary>
        /// Gets or Sets PythonExpression
        /// </summary>
        [JsonPropertyName("python_expression")]
        public string PythonExpression { get { return this.PythonExpressionOption; } set { this.PythonExpressionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Sched
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraScheduleData> SchedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sched
        /// </summary>
        [JsonPropertyName("sched")]
        public MoiraScheduleData Sched { get { return this.SchedOption; } set { this.SchedOption = new Option<MoiraScheduleData>(value); } }

        /// <summary>
        /// Used to track the state of TriggerSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerSource
        /// </summary>
        /* <example>graphite_local</example> */
        [JsonPropertyName("trigger_source")]
        public string TriggerSource { get { return this.TriggerSourceOption; } set { this.TriggerSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Ttl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TtlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ttl
        /// </summary>
        /* <example>600</example> */
        [JsonPropertyName("ttl")]
        public long? Ttl { get { return this.TtlOption; } set { this.TtlOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TtlState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TtlStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets TtlState
        /// </summary>
        /* <example>NODATA</example> */
        [JsonPropertyName("ttl_state")]
        public string TtlState { get { return this.TtlStateOption; } set { this.TtlStateOption = new Option<string>(value); } }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public long? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets WarnValue
        /// </summary>
        /* <example>5000</example> */
        [JsonPropertyName("warn_value")]
        public decimal? WarnValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraTriggerCheck {\n");
            sb.Append("  AloneMetrics: ").Append(AloneMetrics).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Highlights: ").Append(Highlights).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastCheck: ").Append(LastCheck).Append("\n");
            sb.Append("  MuteNewMetrics: ").Append(MuteNewMetrics).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Throttling: ").Append(Throttling).Append("\n");
            sb.Append("  TriggerType: ").Append(TriggerType).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  ErrorValue: ").Append(ErrorValue).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  PythonExpression: ").Append(PythonExpression).Append("\n");
            sb.Append("  Sched: ").Append(Sched).Append("\n");
            sb.Append("  TriggerSource: ").Append(TriggerSource).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  TtlState: ").Append(TtlState).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  WarnValue: ").Append(WarnValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraTriggerCheck" />
    /// </summary>
    public class MoiraTriggerCheckJsonConverter : JsonConverter<MoiraTriggerCheck>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraTriggerCheck" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraTriggerCheck Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, bool>> aloneMetrics = default;
            Option<string> createdBy = default;
            Option<Dictionary<string, string>> highlights = default;
            Option<string> id = default;
            Option<MoiraCheckData> lastCheck = default;
            Option<bool?> muteNewMetrics = default;
            Option<string> name = default;
            Option<List<string>> patterns = default;
            Option<List<string>> tags = default;
            Option<List<string>> targets = default;
            Option<long?> throttling = default;
            Option<string> triggerType = default;
            Option<string> updatedBy = default;
            Option<string> clusterId = default;
            Option<long?> createdAt = default;
            Option<string> desc = default;
            Option<decimal?> errorValue = default;
            Option<string> expression = default;
            Option<string> pythonExpression = default;
            Option<MoiraScheduleData> sched = default;
            Option<string> triggerSource = default;
            Option<long?> ttl = default;
            Option<string> ttlState = default;
            Option<long?> updatedAt = default;
            Option<decimal?> warnValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "alone_metrics":
                            aloneMetrics = new Option<Dictionary<string, bool>>(JsonSerializer.Deserialize<Dictionary<string, bool>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "created_by":
                            createdBy = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "highlights":
                            highlights = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "last_check":
                            lastCheck = new Option<MoiraCheckData>(JsonSerializer.Deserialize<MoiraCheckData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mute_new_metrics":
                            muteNewMetrics = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "patterns":
                            patterns = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "targets":
                            targets = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "throttling":
                            throttling = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trigger_type":
                            triggerType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_by":
                            updatedBy = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cluster_id":
                            clusterId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "desc":
                            desc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "error_value":
                            errorValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "expression":
                            expression = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "python_expression":
                            pythonExpression = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sched":
                            sched = new Option<MoiraScheduleData>(JsonSerializer.Deserialize<MoiraScheduleData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trigger_source":
                            triggerSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ttl":
                            ttl = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "ttl_state":
                            ttlState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "warn_value":
                            warnValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!aloneMetrics.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(aloneMetrics));

            if (!createdBy.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(createdBy));

            if (!highlights.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(highlights));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(id));

            if (!lastCheck.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(lastCheck));

            if (!muteNewMetrics.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(muteNewMetrics));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(name));

            if (!patterns.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(patterns));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(tags));

            if (!targets.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(targets));

            if (!throttling.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(throttling));

            if (!triggerType.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(triggerType));

            if (!updatedBy.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(updatedBy));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(createdAt));

            if (!errorValue.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(errorValue));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(updatedAt));

            if (!warnValue.IsSet)
                throw new ArgumentException("Property is required for class MoiraTriggerCheck.", nameof(warnValue));

            if (aloneMetrics.IsSet && aloneMetrics.Value == null)
                throw new ArgumentNullException(nameof(aloneMetrics), "Property is not nullable for class MoiraTriggerCheck.");

            if (createdBy.IsSet && createdBy.Value == null)
                throw new ArgumentNullException(nameof(createdBy), "Property is not nullable for class MoiraTriggerCheck.");

            if (highlights.IsSet && highlights.Value == null)
                throw new ArgumentNullException(nameof(highlights), "Property is not nullable for class MoiraTriggerCheck.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MoiraTriggerCheck.");

            if (lastCheck.IsSet && lastCheck.Value == null)
                throw new ArgumentNullException(nameof(lastCheck), "Property is not nullable for class MoiraTriggerCheck.");

            if (muteNewMetrics.IsSet && muteNewMetrics.Value == null)
                throw new ArgumentNullException(nameof(muteNewMetrics), "Property is not nullable for class MoiraTriggerCheck.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class MoiraTriggerCheck.");

            if (patterns.IsSet && patterns.Value == null)
                throw new ArgumentNullException(nameof(patterns), "Property is not nullable for class MoiraTriggerCheck.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class MoiraTriggerCheck.");

            if (targets.IsSet && targets.Value == null)
                throw new ArgumentNullException(nameof(targets), "Property is not nullable for class MoiraTriggerCheck.");

            if (throttling.IsSet && throttling.Value == null)
                throw new ArgumentNullException(nameof(throttling), "Property is not nullable for class MoiraTriggerCheck.");

            if (triggerType.IsSet && triggerType.Value == null)
                throw new ArgumentNullException(nameof(triggerType), "Property is not nullable for class MoiraTriggerCheck.");

            if (updatedBy.IsSet && updatedBy.Value == null)
                throw new ArgumentNullException(nameof(updatedBy), "Property is not nullable for class MoiraTriggerCheck.");

            if (clusterId.IsSet && clusterId.Value == null)
                throw new ArgumentNullException(nameof(clusterId), "Property is not nullable for class MoiraTriggerCheck.");

            if (triggerSource.IsSet && triggerSource.Value == null)
                throw new ArgumentNullException(nameof(triggerSource), "Property is not nullable for class MoiraTriggerCheck.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class MoiraTriggerCheck.");

            return new MoiraTriggerCheck(aloneMetrics.Value, createdBy.Value, highlights.Value, id.Value, lastCheck.Value, muteNewMetrics.Value.Value, name.Value, patterns.Value, tags.Value, targets.Value, throttling.Value.Value, triggerType.Value, updatedBy.Value, clusterId, createdAt.Value, desc, errorValue.Value, expression, pythonExpression, sched, triggerSource, ttl, ttlState, updatedAt.Value, warnValue.Value);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraTriggerCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraTriggerCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraTriggerCheck moiraTriggerCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraTriggerCheck, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraTriggerCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraTriggerCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraTriggerCheck moiraTriggerCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraTriggerCheck.AloneMetrics == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.AloneMetrics), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.CreatedBy == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.CreatedBy), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Highlights == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Highlights), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Id == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Id), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.LastCheck == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.LastCheck), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Name == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Name), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Patterns == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Patterns), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Tags == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Tags), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.Targets == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.Targets), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.TriggerType == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.TriggerType), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.UpdatedBy == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.UpdatedBy), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.ClusterIdOption.IsSet && moiraTriggerCheck.ClusterId == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.ClusterId), "Property is required for class MoiraTriggerCheck.");

            if (moiraTriggerCheck.TriggerSourceOption.IsSet && moiraTriggerCheck.TriggerSource == null)
                throw new ArgumentNullException(nameof(moiraTriggerCheck.TriggerSource), "Property is required for class MoiraTriggerCheck.");

            writer.WritePropertyName("alone_metrics");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.AloneMetrics, jsonSerializerOptions);
            writer.WriteString("created_by", moiraTriggerCheck.CreatedBy);

            writer.WritePropertyName("highlights");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.Highlights, jsonSerializerOptions);
            writer.WriteString("id", moiraTriggerCheck.Id);

            writer.WritePropertyName("last_check");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.LastCheck, jsonSerializerOptions);
            writer.WriteBoolean("mute_new_metrics", moiraTriggerCheck.MuteNewMetrics);

            writer.WriteString("name", moiraTriggerCheck.Name);

            writer.WritePropertyName("patterns");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.Patterns, jsonSerializerOptions);
            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.Tags, jsonSerializerOptions);
            writer.WritePropertyName("targets");
            JsonSerializer.Serialize(writer, moiraTriggerCheck.Targets, jsonSerializerOptions);
            writer.WriteNumber("throttling", moiraTriggerCheck.Throttling);

            writer.WriteString("trigger_type", moiraTriggerCheck.TriggerType);

            writer.WriteString("updated_by", moiraTriggerCheck.UpdatedBy);

            if (moiraTriggerCheck.ClusterIdOption.IsSet)
                writer.WriteString("cluster_id", moiraTriggerCheck.ClusterId);

            if (moiraTriggerCheck.CreatedAt != null)
                writer.WriteNumber("created_at", moiraTriggerCheck.CreatedAt.Value);
            else
                writer.WriteNull("created_at");

            if (moiraTriggerCheck.DescOption.IsSet)
                if (moiraTriggerCheck.DescOption.Value != null)
                    writer.WriteString("desc", moiraTriggerCheck.Desc);
                else
                    writer.WriteNull("desc");

            if (moiraTriggerCheck.ErrorValue != null)
                writer.WriteNumber("error_value", moiraTriggerCheck.ErrorValue.Value);
            else
                writer.WriteNull("error_value");

            if (moiraTriggerCheck.ExpressionOption.IsSet)
                if (moiraTriggerCheck.ExpressionOption.Value != null)
                    writer.WriteString("expression", moiraTriggerCheck.Expression);
                else
                    writer.WriteNull("expression");

            if (moiraTriggerCheck.PythonExpressionOption.IsSet)
                if (moiraTriggerCheck.PythonExpressionOption.Value != null)
                    writer.WriteString("python_expression", moiraTriggerCheck.PythonExpression);
                else
                    writer.WriteNull("python_expression");

            if (moiraTriggerCheck.SchedOption.IsSet)
                if (moiraTriggerCheck.SchedOption.Value != null)
                {
                    writer.WritePropertyName("sched");
                    JsonSerializer.Serialize(writer, moiraTriggerCheck.Sched, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sched");
            if (moiraTriggerCheck.TriggerSourceOption.IsSet)
                writer.WriteString("trigger_source", moiraTriggerCheck.TriggerSource);

            if (moiraTriggerCheck.TtlOption.IsSet)
                writer.WriteNumber("ttl", moiraTriggerCheck.TtlOption.Value.Value);

            if (moiraTriggerCheck.TtlStateOption.IsSet)
                if (moiraTriggerCheck.TtlStateOption.Value != null)
                    writer.WriteString("ttl_state", moiraTriggerCheck.TtlState);
                else
                    writer.WriteNull("ttl_state");

            if (moiraTriggerCheck.UpdatedAt != null)
                writer.WriteNumber("updated_at", moiraTriggerCheck.UpdatedAt.Value);
            else
                writer.WriteNull("updated_at");

            if (moiraTriggerCheck.WarnValue != null)
                writer.WriteNumber("warn_value", moiraTriggerCheck.WarnValue.Value);
            else
                writer.WriteNull("warn_value");
        }
    }
}
